A complete binary tree of height h has between 2h and 2h+1 -1 nodes

Definition of complete binary tree: every node except from leaves has 2 children

This implies the height of a complete binary tree is floor(log n)

A complete binary tree can be used to represent a min heap (PQ)
and also can be represented as an array

where for a given node:
    - it's left child is 2*i
    - it's right child is 2*i + 1
    - it's parent is i//2
so no links required

we can perform quick opertions (get min) using the heap property of
parent <= children (in a min heap)

so the min element can be found at the root

so find_min is O(1)

~~ !! Building a heap !! ~~

can be done with N inserts into a heap.
each insert will take
    - O(1) avg time
    - O(log n) worst case time (percolate up)
So this has worst case O(n log n) complexity to build a heap

Worst case linear time O(n) heapify
    - works bottom up
    - fewer nodes have a large height --> exploit this
    It is easy to show that a complete binary tree of height h has between 2h and 2h+1 − 1 nodes. This implies that the height of a complete binary tree is ⌊log N⌋, which is clearly O(log N).

Then starting from the lowest level (leaves) and moving upwards, shift the root of each subtree downward
as in the deletion algorithm until the heap property is restored.

Only nodes with height at least 1 can move down, all leaves don't move down

More specifically if all the subtrees starting at some height {\displaystyle h} h (measured from the bottom)
have already been "heapified", the trees at height h+1 can be heapified by sending their root down along the
path of maximum valued children when building a max-heap, or minimum valued children when building a min-heap.

So all leaves are 'heapified' or are already heaps, move up one level, percolate down

Math: This uses the fact that the given infinite series h / 2h converges to 2.

Concept:
looking at last half of the nodes, they are heaps in their selves
only when looking at parents will we worry about non valid heaps

https://www.youtube.com/watch?v=d3qd_wQdYqg

we skip all leaves, 1/2 nodes are leaves (skip these)
parents of leaves can move down at most 1 level, 1/4 nodes are parents
grandparents of leaves can move down at most 2 levels, 1/8 nodes are grandparents
the root can move down the height of the tree (but just 1 root)
